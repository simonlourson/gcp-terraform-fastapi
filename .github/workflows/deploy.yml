name: Deploy Infrastructure

on:
  push:
  workflow_dispatch:
    inputs:
      zone:
        description: 'Zone to deploy compute instances within your region'
        required: false
        default: 'b'
      fast_api_instance_compute_type:
        description: 'Size of the VM hosting fastAPI'
        required: false
        type: choice
        options:
          - 'e2-micro'
          - 'e2-small'
          - 'e2-medium'
          - 'e2-standard-2'
          - 'e2-standard-4'
          - 'e2-standard-8'
          - 'n2-standard-2'
          - 'n2-standard-4'
          - 'n2-standard-8'
          - 'n2-standard-16'
          - 'n2-highcpu-2'
          - 'n2-highcpu-4'
          - 'n2-highcpu-8'
          - 'n2-highcpu-16'
          - 'n1-standard-1'
          - 'n1-standard-2'
          - 'n1-standard-4'
          - 'n1-standard-8'
          - 'n1-standard-16'
          - 'n1-highcpu-2'
          - 'n1-highcpu-4'
          - 'n1-highcpu-8'
          - 'n1-highcpu-16'
        default: 'e2-medium'

env:
  PROJECT_NAME: ${{ github.ref_name }}
  ZONE: 'b'
  FAST_API_COMPUTE_TYPE: 'e2-medium'

jobs:
  terraform_plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: terraform

    steps:
    # Step 1: Checkout the repository
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref_name }}

    # Step 2: Set up Google Cloud credentials based on project name
    - name: Set up Google Cloud credentials
      id: setup_credentials
      run: |
          CREDENTIALS_GCP_NAME=$(echo "$PROJECT_NAME" | sed 's/-/_/g')
          echo "CREDENTIALS_GCP_NAME=${CREDENTIALS_GCP_NAME}" >> $GITHUB_ENV

    # Step 3: Export credentials to credentials.json
    - name: Export credentials to credentials.json
      id: export_credentials_json
      env: 
        GCP_CREDENTIALS: ${{ secrets[format('{0}', env.CREDENTIALS_GCP_NAME)] }}

      run: |
          echo "$GCP_CREDENTIALS" | jq . > credentials.json

    # Step 4: Export GOOGLE_APPLICATION_CREDENTIALS environment variable
    - name: Export Google Application Credentials
      run: echo "GOOGLE_APPLICATION_CREDENTIALS=credentials.json" >> $GITHUB_ENV

    # Step 5: Create Google Cloud bucket if it doesn't exist
    - name: Create Terraform GCS Bucket if Not Exists
      run: |
          gcloud auth activate-service-account --key-file=credentials.json
          gcloud config set project "${{ env.PROJECT_NAME }}"
          BUCKET_NAME="${{ env.PROJECT_NAME }}-terraform"
          if ! gsutil ls -b "gs://$BUCKET_NAME" &>/dev/null; then
            gsutil mb "gs://$BUCKET_NAME"
          fi

    # Step 6: Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Step 7: Initialize the Terraform configuration
    - name: Terraform Init
      run: terraform init --backend-config="bucket=${{ env.PROJECT_NAME }}-terraform"

    # Step 8: Check conformity of Terraform configuration files
    - name: Terraform Validate
      run: terraform validate 

    # Step 9: Create context.tfvars file
    - name: Create context.tfvars
      run: |
        REGION=$(echo "${{ env.PROJECT_NAME }}" | cut -d '-' -f 3-4)
        ZONE="${REGION}-${{ env.ZONE }}"      

        cat <<EOF > context.tfvars
        project_id = "${{ env.PROJECT_NAME }}"
        region = "$REGION"
        zone = "$ZONE"
        tfstate_bucket_name = "${{ env.PROJECT_NAME }}-terraform"
        fast_api_instance_compute_type = "${{ env.FAST_API_COMPUTE_TYPE }}"
        EOF
    
    # Step 10: Export context.tfvars to the terraform GCS Bucket
    - name: Export context.tfvars to GCS terraform
      run: |
        BUCKET_NAME="${{ env.PROJECT_NAME }}-terraform"
        gsutil cp context.tfvars "gs://$BUCKET_NAME/"

    # Step 11: Run Terraform Plan to check for infrastructure changes
    - name: Terraform Plan
      id: plan
      run: terraform plan -var-file="context.tfvars"

  terraform_apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: terraform_plan  # Ensure this job runs after the plan job

    defaults:
      run:
        shell: bash
        working-directory: terraform

    steps:
    # Step 1: Checkout the repository
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref_name }}

    # Step 2: Set up Google Cloud credentials based on project name
    - name: Set up Google Cloud credentials
      id: setup_credentials
      run: |
          CREDENTIALS_GCP_NAME=$(echo "$PROJECT_NAME" | sed 's/-/_/g')
          echo "CREDENTIALS_GCP_NAME=${CREDENTIALS_GCP_NAME}" >> $GITHUB_ENV

    # Step 3: Export credentials to credentials.json
    - name: Export credentials to credentials.json
      id: export_credentials_json
      env: 
        GCP_CREDENTIALS: ${{ secrets[format('{0}', env.CREDENTIALS_GCP_NAME)] }}

      run: |
          echo "$GCP_CREDENTIALS" | jq . > credentials.json

    # Step 4: Export GOOGLE_APPLICATION_CREDENTIALS environment variable
    - name: Export Google Application Credentials
      run: echo "GOOGLE_APPLICATION_CREDENTIALS=credentials.json" >> $GITHUB_ENV

    # Step 7: Download context.tfvars from GCS
    - name: Download context.tfvars from GCS
      run: |
        gcloud auth activate-service-account --key-file=credentials.json
        gcloud config set project "${{ env.PROJECT_NAME }}"
        BUCKET_NAME="${{ env.PROJECT_NAME }}-terraform"
        gsutil cp "gs://$BUCKET_NAME/context.tfvars" .

    # Step 5: Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Step 6: Initialize the Terraform configuration
    - name: Terraform Init
      run: terraform init --backend-config="bucket=${{ env.PROJECT_NAME }}-terraform"

    # Step 7: Run Terraform Apply to deploy the configuration
    - name: Terraform Apply with Retry
      uses: nick-fields/retry@v2.8.3
      with:
        timeout_minutes: 30
        retry_wait_seconds: 60
        max_attempts: 3
        command: |
          cd terraform
          terraform apply -auto-approve -var-file="context.tfvars"
        retry_on: error
        warning_on_retry: true
        continue_on_error: false

    # Step 8: Run Terraform Output
    - name: Terraform Output 
      run: terraform output
